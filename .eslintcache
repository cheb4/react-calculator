[{"/opt/lampp/htdocs/projects/calc-complex/src/index.js":"1","/opt/lampp/htdocs/projects/calc-complex/src/App.js":"2","/opt/lampp/htdocs/projects/calc-complex/src/components/button.js":"3","/opt/lampp/htdocs/projects/calc-complex/src/components/screen.js":"4","/opt/lampp/htdocs/projects/calc-complex/src/components/MemoryScreen.js":"5"},{"size":197,"mtime":1607884216445,"results":"6","hashOfConfig":"7"},{"size":2357,"mtime":1608144254301,"results":"8","hashOfConfig":"7"},{"size":267,"mtime":1608059343945,"results":"9","hashOfConfig":"7"},{"size":308,"mtime":1607983118203,"results":"10","hashOfConfig":"7"},{"size":202,"mtime":1608142061322,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"121vjj3",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/opt/lampp/htdocs/projects/calc-complex/src/index.js",[],["24","25"],"/opt/lampp/htdocs/projects/calc-complex/src/App.js",["26","27"],"import React, { useState, useEffect } from \"react\";\nimport \"./style.css\";\nimport Btn from \"./components/button\";\nimport Screen from \"./components/screen\";\n\nconst App = () => {\n  const [DisplayNumber, setDisplayNumber] = useState([]);\n  const [Memory, setMemory] = useState([]);\n  const [evaluation, setEvaluation] = useState(\"\");\n\n  const operators = (val) => {\n    if (DisplayNumber.length === 0) {\n      console.log(Memory);\n      setDisplayNumber([]);\n      return;\n    }\n    if (Memory.length !== 0) {\n      console.log(\"gggg\");\n    }\n    const convertedNumber = Number(DisplayNumber.join(\"\"));\n    setMemory([...Memory, convertedNumber, val]);\n    console.log(Memory);\n    setDisplayNumber([]);\n  };\n\n  const Equals = () => {\n    console.log(Memory);\n    setMemory([...Memory, Number(DisplayNumber.join(\"\"))]);\n    setEvaluation(Memory);\n  };\n\n  useEffect(() => {\n    if (evaluation !== \"\") {\n      const preEval = Memory.join(\" \");\n      const evaluated = eval(preEval);\n      setDisplayNumber([evaluated]);\n      setMemory([]);\n      return () => {\n        setEvaluation(\"\");\n      };\n    }\n  }, [evaluation]);\n\n  const clearButtonHandler = () => {\n    setDisplayNumber([]);\n    setMemory([]);\n  };\n\n  const buttonHandler = (val) => {\n    console.log(\"pressed button \", val);\n    setDisplayNumber([...DisplayNumber, val]);\n    console.log(DisplayNumber);\n  };\n  //\n  const NumberButtons = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n    .map((ele) => ele.toString(10))\n    .map((num) => (\n      <Btn\n        className=\"numberKeys\"\n        style={{ color: \"white\", background: \"silver\" }}\n        key={num}\n        handler={buttonHandler}\n        value={num}\n      />\n    ));\n  //\n  return (\n    <>\n      <div className=\"frame\">\n        <div className=\"screen\">\n          <Screen whatToDisplay={DisplayNumber} memory={Memory} />\n        </div>\n        <div className=\"keypad\">\n          <div className=\"numbers\">{NumberButtons}</div>\n          <div className=\"operators\">\n            <Btn handler={operators} value=\"+\" />\n            <Btn handler={operators} value=\"-\" />\n            <Btn handler={operators} value=\"*\" />\n            <Btn handler={operators} value=\"/\" />\n            <Btn handler={clearButtonHandler} value=\"clear\" />\n            <Btn handler={Equals} value=\"=\" />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","/opt/lampp/htdocs/projects/calc-complex/src/components/button.js",[],"/opt/lampp/htdocs/projects/calc-complex/src/components/screen.js",[],"/opt/lampp/htdocs/projects/calc-complex/src/components/MemoryScreen.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":35,"column":25,"nodeType":"34","messageId":"35","endLine":35,"endColumn":29},{"ruleId":"36","severity":1,"message":"37","line":42,"column":6,"nodeType":"38","endLine":42,"endColumn":18,"suggestions":"39"},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-eval","eval can be harmful.","CallExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'Memory'. Either include it or remove the dependency array.","ArrayExpression",["42"],"no-global-assign","no-unsafe-negation",{"desc":"43","fix":"44"},"Update the dependencies array to be: [Memory, evaluation]",{"range":"45","text":"46"},[1103,1115],"[Memory, evaluation]"]